/*
* generated by Xtext
*/
grammar InternalTopanl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.istic.m2.idm.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.istic.m2.idm.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.istic.m2.idm.xtext.services.TopanlGrammarAccess;

}

@parser::members {
 
 	private TopanlGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TopanlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleGeometry
entryRuleGeometry 
:
{ before(grammarAccess.getGeometryRule()); }
	 ruleGeometry
{ after(grammarAccess.getGeometryRule()); } 
	 EOF 
;

// Rule Geometry
ruleGeometry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeometryAccess().getGroup()); }
(rule__Geometry__Group__0)
{ after(grammarAccess.getGeometryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getIntegerKeyword()); }

	'Integer' 

{ after(grammarAccess.getIntegerAccess().getIntegerKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBool
entryRuleBool 
:
{ before(grammarAccess.getBoolRule()); }
	 ruleBool
{ after(grammarAccess.getBoolRule()); } 
	 EOF 
;

// Rule Bool
ruleBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolAccess().getBoolKeyword()); }

	'Bool' 

{ after(grammarAccess.getBoolAccess().getBoolKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Geometry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__0__Impl
	rule__Geometry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getGeometryKeyword_0()); }

	'Geometry' 

{ after(grammarAccess.getGeometryAccess().getGeometryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__1__Impl
	rule__Geometry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getGeometryAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__2__Impl
	rule__Geometry__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getGroup_2()); }
(rule__Geometry__Group_2__0)?
{ after(grammarAccess.getGeometryAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__3__Impl
	rule__Geometry__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getGroup_3()); }
(rule__Geometry__Group_3__0)?
{ after(grammarAccess.getGeometryAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__4__Impl
	rule__Geometry__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getDimensionsKeyword_4()); }

	'dimensions' 

{ after(grammarAccess.getGeometryAccess().getDimensionsKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__5__Impl
	rule__Geometry__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getEqualsSignKeyword_5()); }

	'=' 

{ after(grammarAccess.getGeometryAccess().getEqualsSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__6__Impl
	rule__Geometry__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getLeftParenthesisKeyword_6()); }

	'(' 

{ after(grammarAccess.getGeometryAccess().getLeftParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__7__Impl
	rule__Geometry__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getDimensionsAssignment_7()); }
(rule__Geometry__DimensionsAssignment_7)
{ after(grammarAccess.getGeometryAccess().getDimensionsAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__8__Impl
	rule__Geometry__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getGroup_8()); }
(rule__Geometry__Group_8__0)*
{ after(grammarAccess.getGeometryAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__9__Impl
	rule__Geometry__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getRightParenthesisKeyword_9()); }

	')' 

{ after(grammarAccess.getGeometryAccess().getRightParenthesisKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__10__Impl
	rule__Geometry__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getGroup_10()); }
(rule__Geometry__Group_10__0)?
{ after(grammarAccess.getGeometryAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getRightCurlyBracketKeyword_11()); }

	'}' 

{ after(grammarAccess.getGeometryAccess().getRightCurlyBracketKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__Geometry__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_2__0__Impl
	rule__Geometry__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getNDimKeyword_2_0()); }

	'nDim' 

{ after(grammarAccess.getGeometryAccess().getNDimKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_2__1__Impl
	rule__Geometry__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getEqualsSignKeyword_2_1()); }

	'=' 

{ after(grammarAccess.getGeometryAccess().getEqualsSignKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getNDimAssignment_2_2()); }
(rule__Geometry__NDimAssignment_2_2)
{ after(grammarAccess.getGeometryAccess().getNDimAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Geometry__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_3__0__Impl
	rule__Geometry__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getIsCircularKeyword_3_0()); }

	'isCircular' 

{ after(grammarAccess.getGeometryAccess().getIsCircularKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_3__1__Impl
	rule__Geometry__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getEqualsSignKeyword_3_1()); }

	'=' 

{ after(grammarAccess.getGeometryAccess().getEqualsSignKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getIsCircularAssignment_3_2()); }
(rule__Geometry__IsCircularAssignment_3_2)
{ after(grammarAccess.getGeometryAccess().getIsCircularAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Geometry__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_8__0__Impl
	rule__Geometry__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getCommaKeyword_8_0()); }

	',' 

{ after(grammarAccess.getGeometryAccess().getCommaKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getDimensionsAssignment_8_1()); }
(rule__Geometry__DimensionsAssignment_8_1)
{ after(grammarAccess.getGeometryAccess().getDimensionsAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Geometry__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_10__0__Impl
	rule__Geometry__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getNeighborsKeyword_10_0()); }

	'neighbors' 

{ after(grammarAccess.getGeometryAccess().getNeighborsKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_10__1__Impl
	rule__Geometry__Group_10__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getEqualsSignKeyword_10_1()); }

	'=' 

{ after(grammarAccess.getGeometryAccess().getEqualsSignKeyword_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_10__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_10__2__Impl
	rule__Geometry__Group_10__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_10__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getLeftParenthesisKeyword_10_2()); }

	'(' 

{ after(grammarAccess.getGeometryAccess().getLeftParenthesisKeyword_10_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_10__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_10__3__Impl
	rule__Geometry__Group_10__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_10__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getNeighborsAssignment_10_3()); }
(rule__Geometry__NeighborsAssignment_10_3)
{ after(grammarAccess.getGeometryAccess().getNeighborsAssignment_10_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_10__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_10__4__Impl
	rule__Geometry__Group_10__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_10__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getGroup_10_4()); }
(rule__Geometry__Group_10_4__0)*
{ after(grammarAccess.getGeometryAccess().getGroup_10_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_10__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_10__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_10__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getRightParenthesisKeyword_10_5()); }

	')' 

{ after(grammarAccess.getGeometryAccess().getRightParenthesisKeyword_10_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Geometry__Group_10_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_10_4__0__Impl
	rule__Geometry__Group_10_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_10_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getCommaKeyword_10_4_0()); }

	',' 

{ after(grammarAccess.getGeometryAccess().getCommaKeyword_10_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_10_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Geometry__Group_10_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_10_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getNeighborsAssignment_10_4_1()); }
(rule__Geometry__NeighborsAssignment_10_4_1)
{ after(grammarAccess.getGeometryAccess().getNeighborsAssignment_10_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Geometry__NDimAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getNDimIntegerParserRuleCall_2_2_0()); }
	ruleInteger{ after(grammarAccess.getGeometryAccess().getNDimIntegerParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__IsCircularAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getIsCircularBoolParserRuleCall_3_2_0()); }
	ruleBool{ after(grammarAccess.getGeometryAccess().getIsCircularBoolParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__DimensionsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getDimensionsDimensionCrossReference_7_0()); }
(
{ before(grammarAccess.getGeometryAccess().getDimensionsDimensionIDTerminalRuleCall_7_0_1()); }
	RULE_ID{ after(grammarAccess.getGeometryAccess().getDimensionsDimensionIDTerminalRuleCall_7_0_1()); }
)
{ after(grammarAccess.getGeometryAccess().getDimensionsDimensionCrossReference_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__DimensionsAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getDimensionsDimensionCrossReference_8_1_0()); }
(
{ before(grammarAccess.getGeometryAccess().getDimensionsDimensionIDTerminalRuleCall_8_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGeometryAccess().getDimensionsDimensionIDTerminalRuleCall_8_1_0_1()); }
)
{ after(grammarAccess.getGeometryAccess().getDimensionsDimensionCrossReference_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__NeighborsAssignment_10_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getNeighborsNeighborCrossReference_10_3_0()); }
(
{ before(grammarAccess.getGeometryAccess().getNeighborsNeighborIDTerminalRuleCall_10_3_0_1()); }
	RULE_ID{ after(grammarAccess.getGeometryAccess().getNeighborsNeighborIDTerminalRuleCall_10_3_0_1()); }
)
{ after(grammarAccess.getGeometryAccess().getNeighborsNeighborCrossReference_10_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__NeighborsAssignment_10_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeometryAccess().getNeighborsNeighborCrossReference_10_4_1_0()); }
(
{ before(grammarAccess.getGeometryAccess().getNeighborsNeighborIDTerminalRuleCall_10_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGeometryAccess().getNeighborsNeighborIDTerminalRuleCall_10_4_1_0_1()); }
)
{ after(grammarAccess.getGeometryAccess().getNeighborsNeighborCrossReference_10_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


