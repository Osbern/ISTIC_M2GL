/*
* generated by Xtext
*/
grammar InternalTopanl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.istic.m2.idm.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.istic.m2.idm.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.istic.m2.idm.xtext.services.TopanlGrammarAccess;

}

@parser::members {

 	private TopanlGrammarAccess grammarAccess;
 	
    public InternalTopanlParser(TokenStream input, TopanlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Geometry";	
   	}
   	
   	@Override
   	protected TopanlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGeometry
entryRuleGeometry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGeometryRule()); }
	 iv_ruleGeometry=ruleGeometry 
	 { $current=$iv_ruleGeometry.current; } 
	 EOF 
;

// Rule Geometry
ruleGeometry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Geometry' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGeometryAccess().getGeometryKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGeometryAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='nDim' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGeometryAccess().getNDimKeyword_2_0());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGeometryAccess().getEqualsSignKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeometryAccess().getNDimIntegerParserRuleCall_2_2_0()); 
	    }
		lv_nDim_4_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeometryRule());
	        }
       		set(
       			$current, 
       			"nDim",
        		lv_nDim_4_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='isCircular' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGeometryAccess().getIsCircularKeyword_3_0());
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGeometryAccess().getEqualsSignKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeometryAccess().getIsCircularBoolParserRuleCall_3_2_0()); 
	    }
		lv_isCircular_7_0=ruleBool		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeometryRule());
	        }
       		set(
       			$current, 
       			"isCircular",
        		lv_isCircular_7_0, 
        		"Bool");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='dimensions' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGeometryAccess().getDimensionsKeyword_4());
    }
	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getGeometryAccess().getEqualsSignKeyword_5());
    }
	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getGeometryAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGeometryRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getGeometryAccess().getDimensionsDimensionCrossReference_7_0()); 
	}

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getGeometryAccess().getCommaKeyword_8_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGeometryRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getGeometryAccess().getDimensionsDimensionCrossReference_8_1_0()); 
	}

)
))*	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getGeometryAccess().getRightParenthesisKeyword_9());
    }
(	otherlv_15='neighbors' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getGeometryAccess().getNeighborsKeyword_10_0());
    }
	otherlv_16='=' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getGeometryAccess().getEqualsSignKeyword_10_1());
    }
	otherlv_17='(' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getGeometryAccess().getLeftParenthesisKeyword_10_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGeometryRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getGeometryAccess().getNeighborsNeighborCrossReference_10_3_0()); 
	}

)
)(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getGeometryAccess().getCommaKeyword_10_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGeometryRule());
	        }
        }
	otherlv_20=RULE_ID
	{
		newLeafNode(otherlv_20, grammarAccess.getGeometryAccess().getNeighborsNeighborCrossReference_10_4_1_0()); 
	}

)
))*	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getGeometryAccess().getRightParenthesisKeyword_10_5());
    }
)?	otherlv_22='}' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getGeometryAccess().getRightCurlyBracketKeyword_11());
    }
)
;









// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerAccess().getIntegerKeyword()); 
    }

    ;





// Entry rule entryRuleBool
entryRuleBool returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolRule()); } 
	 iv_ruleBool=ruleBool 
	 { $current=$iv_ruleBool.current.getText(); }  
	 EOF 
;

// Rule Bool
ruleBool returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolAccess().getBoolKeyword()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


